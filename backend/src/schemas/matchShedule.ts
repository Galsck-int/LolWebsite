import { Type } from '@sinclair/typebox'
import { MatchSchedule } from '../generated/prisma'

/**
 * MatchSchedule schema for API responses
 *
 * Uses Prisma-generated types to ensure type safety
 */
export const MatchScheduleSchema = Type.Object({
    id: Type.Number(),
    dateTime_UTC: Type.Optional(Type.String()),
    team1: Type.Optional(Type.String()),
    team2: Type.Optional(Type.String()),
    dst: Type.Optional(Type.String()),
    round: Type.Optional(Type.String()),
    winner: Type.Optional(Type.String()),
    team1Points: Type.Optional(Type.Number()),
    team2Points: Type.Optional(Type.Number()),
    team1Score: Type.Optional(Type.Number()),
    team2Score: Type.Optional(Type.Number()),
    tab: Type.Optional(Type.String()),
    groupName: Type.Optional(Type.String()),
    castersPBP: Type.Optional(Type.String()),
    castersColor: Type.Optional(Type.String()),
    mvp: Type.Optional(Type.String()),
    overviewPage: Type.Optional(Type.String()),
    createdAt: Type.Optional(Type.String()),
    updatedAt: Type.Optional(Type.String()),
    bestOf: Type.Optional(Type.Number()),
    casters: Type.Optional(Type.Array(Type.String())),
    disabledChampions: Type.Optional(Type.Array(Type.String())),
    ff: Type.Optional(Type.Number()),
    footnote: Type.Optional(Type.String()),
    hasTime: Type.Optional(Type.Boolean()),
    hotfix: Type.Optional(Type.String()),
    initialPageAndTab: Type.Optional(Type.String()),
    interviewWith: Type.Optional(Type.Array(Type.String())),
    isFlexibleStart: Type.Optional(Type.Boolean()),
    isNullified: Type.Optional(Type.Boolean()),
    isReschedulable: Type.Optional(Type.Boolean()),
    isTiebreaker: Type.Optional(Type.Boolean()),
    legacyPatch: Type.Optional(Type.String()),
    matchDay: Type.Optional(Type.Number()),
    matchId: Type.Optional(Type.String()),
    mvpPoints: Type.Optional(Type.Number()),
    overrideAllowPredictions: Type.Optional(Type.Boolean()),
    overrideDisallowPredictions: Type.Optional(Type.Boolean()),
    pageAndTeam1: Type.Optional(Type.String()),
    pageAndTeam2: Type.Optional(Type.String()),
    patch: Type.Optional(Type.String()),
    patchFootnote: Type.Optional(Type.String()),
    patchPage: Type.Optional(Type.String()),
    phase: Type.Optional(Type.String()),
    player1: Type.Optional(Type.String()),
    player2: Type.Optional(Type.String()),
    qq: Type.Optional(Type.Number()),
    recap: Type.Optional(Type.String()),
    reddit: Type.Optional(Type.String()),
    shownName: Type.Optional(Type.String()),
    shownRound: Type.Optional(Type.String()),
    stream: Type.Optional(Type.String()),
    streamDisplay: Type.Optional(Type.String()),
    tags: Type.Optional(Type.Array(Type.String())),
    team1Advantage: Type.Optional(Type.Number()),
    team1Final: Type.Optional(Type.String()),
    team1Footnote: Type.Optional(Type.String()),
    team1PointsTB: Type.Optional(Type.Number()),
    team1Poster: Type.Optional(Type.String()),
    team2Advantage: Type.Optional(Type.Number()),
    team2Final: Type.Optional(Type.String()),
    team2Footnote: Type.Optional(Type.String()),
    team2PointsTB: Type.Optional(Type.Number()),
    team2Poster: Type.Optional(Type.String()),
    uniqueMatch: Type.Optional(Type.String()),
    venue: Type.Optional(Type.String()),
    vodHighlights: Type.Optional(Type.String()),
    vodInterview: Type.Optional(Type.String()),
    wanplus: Type.Optional(Type.String()),
    wanplusId: Type.Optional(Type.Number()),
    nMatchInPage: Type.Optional(Type.Number()),
    nMatchInTab: Type.Optional(Type.Number()),
    nPage: Type.Optional(Type.Number()),
    nTabInPage: Type.Optional(Type.Number()),
    initialNMatchInTab: Type.Optional(Type.Number()),
})

export const MatchScheduleListResponse = Type.Array(MatchScheduleSchema)

// Export Prisma type for direct use
export type MatchScheduleType = MatchSchedule
